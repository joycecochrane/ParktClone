<script src="//maps.google.com/maps/api/js?v=3.19&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
<script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>

<%= javascript_include_tag "application" %>
<% provide(:title, "Home") %>

<div class="row-fluid">

  <div class="col-md-2">

    <div class="form-group">
      <label style="width:auto" for="address"></label>
      <input type="text"
             class="form-control"
             id="address"
             placeholder="Search by address:">
    </div>

      <div class="panel-body" >
        <p id="radiusText">Radius (m)</p>
        <input id="radiusControl"
               data-slider-id='radiusControlSlider'
               type="text"
               data-slider-min="50"
               data-slider-max="400"
               data-slider-step="50"
               data-slider-value="400"/>

        <p id="rateText">Maximum Rate/Hr ($)</p>
        <input id="rateControl"
               data-slider-id='rateControlSlider'
               type="text"
               data-slider-min="1.00"
               data-slider-max="5.50"
               data-slider-step="0.25"
               data-slider-value="3.00"/>

        <p id="hourText">Minimum Hours (Hr)</p>
        <input id="hourControl"
               data-slider-id='hourControlSlider'
               type="text"
               data-slider-min="1"
               data-slider-max="5"
               data-slider-step="1"
               data-slider-value="1"/>
      </div>
      <div id="dropdown">
     <div class="btn-group">
         <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Previous Locations
  <span class="caret"></span></button>
  <ul class="dropdown-menu">
                  <li><a href="#"></a></li>
                  <li><a href="#"></a></li>
                  <li><a href="#"></a></li>

      </ul>
    </div>
    </div>
</div>

  <div class="col-md-8">
    <div id="map" style='width: 900px; height: 900px;'></div>
  </div>

  <div class ="col-md-2">
    <div class="panel-body">
        <!--From Twitter's Search Timeline Widget Creator: https://twitter.com/settings/widgets/621048790846345216/edit?focus_textarea=1&notice=WIDGET_CREATED-->
        <a class="twitter-timeline" data-dnt="true" href="https://twitter.com/hashtag/MeterMiseries" data-widget-id="621048790846345216">#MeterMiseries Tweets</a>
            <script>
            !function(d,s,id){
                var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';
                if(!d.getElementById(id)){
                    js=d.createElement(s);
                    js.id=id;
                    js.src=p+"://platform.twitter.com/widgets.js";
                    fjs.parentNode.insertBefore(js,fjs);
                }
            }
            (document,"script","twitter-wjs");
            </script>
    </div>
  </div>
</div>

<script type="text/javascript">

// global variables
var myMarker = null;
var handler = null;
var radiusCircle = null;
var gMeters = null;
var markers = [];
var currentRadius = null;
var currentRate = null;
var currentHour = null;
var markerQueue = [];
var gInfoWindow = null;
var locationHistory = [];

// Initialize the sliders
(function() {
  jQuery(function() {
    $("#radiusControl").slider();
    $("#rateControl").slider();
    $("#hourControl").slider();
  });
}).call(this);

window.onload = function(){

    var geocoder = new google.maps.Geocoder;
    var addressData = null;
    handler = Gmaps.build('Google');
    myMarker = false;
    setTimeout(loadLastLocations, 0);

  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    google.maps.event.addListener(handler.getMap(), 'click', function(event){
        var myLatLng = event.latLng;
        var lat = myLatLng.lat();
        var lng = myLatLng.lng();

        setMeterZoom(lat, lng);

        if (gInfoWindow){
            //Dismiss Info Window
            gInfoWindow.setMap(null);
            gInfoWindow = null;
        }

        setSliderValues();
        placeMarker(myLatLng);

        makeAJAXCallsForLocation(lat, lng, true);
        //latLonToAddress(myLatLng);
    })

    handler.getMap().setCenter(new google.maps.LatLng(49.267292, -123.116226));
    handler.getMap().setZoom(14);
    handler.fitMapToBounds();
  });

  $("#radiusControl").on('change', function(e) {
    currentRadius = e.value.newValue;
    setTimeout(applyAllFilters, 0);
  });

  //updates the map when rate option for filtering is changed
  $("#rateControl").on('change', function(e) {
    currentRate = e.value.newValue;
    setTimeout(applyAllFilters, 0);
  });

  $('#hourControl').on('change', function(e) {
    currentHour = e.value.newValue;
    setTimeout(applyAllFilters, 0);
  });

  //search by address


  $("#address").keypress(function(e) {
    if (e.keyCode == 13) {
      var address = $("#address").val();
      //console.log("Address: " + address);
      plotByAddress(address);
    }
  });


    function setMeterZoom(lat, lng) {
        handler.getMap().setCenter(new google.maps.LatLng(lat - 0.001, lng));
        handler.getMap().setZoom(16);
    }

    function loadLastLocations() {
        $('#dropdown').unbind('click');
        $.ajax({url :"location/history",
            success: function(result){
                resultData = result;
                json = resultData["location"];
                locationHistory = json;
                locationHistory = getAddress(locationHistory);

            }});


        $('#dropdown').on('click','button',function(){
                    var buttonVal = $(this).html();
                    var ul = $(this).siblings();

                    $(ul).empty();
                    $.each(locationHistory,function(i, l){

                        $(ul).append('<li><a>'+l.address+'</a></li>'); //change to an address which also moves marker on map to that location
                        var li = $(ul).children()[i];
                        $(li).data(l);

          });
    });
        $('#dropdown').on('click','a',function(){

            var location = $(this).parent();
            var locationdata = $(location).data();
            //console.log(locationdata);
            setSliderValues();
            //handler.getMap().setCenter(locationdata);
            setMeterZoom(locationdata.lat, locationdata.lng);
            placeMarker(new google.maps.LatLng(locationdata.lat, locationdata.lng));
            makeAJAXCallsForLocation(locationdata.lat, locationdata.lng, false);
        });
    }

  function getAddress(locations) {
   addressArray = [];

   locations.reverse();

    locations.map(function(e, index){
                var temp = null;
                geocoder.geocode({'location': new google.maps.LatLng(e.lat, e.lng)}, function(results, status) {

                if (status == google.maps.GeocoderStatus.OK) {

                    addressData = results[0].formatted_address;
                    //console.log(addressData);
                    temp = {lat: e.lat, lng: e.lng, address: addressData};
                  }
                  else {
                    temp = {lat: e.lat, lng: e.lng, address: "lat:"+e.lat+" lng:"+e.lng};
                  }
                  addressArray[index] = temp;
                });


            });

            return addressArray
  }

  function makeAJAXCallsForLocation(lat, lng, reloadLocationsWhenDone){
      var formData = ("lat=" + lat + "&lon=" + lng );
      $.ajax({type :'POST', url :"/location", data :formData});
      $.ajax({url :"meters/asJSON",
          success: function(result){
              gMeters = result["meters"];
              applyAllFilters();
              if(reloadLocationsWhenDone){
                loadLastLocations();
              }
          }
      });
  }


    function plotByAddress(address) {
      geocoder.geocode( { 'address': address }, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            var location = results[0].geometry.location;
          //handler.getMap().setCenter(location);
          placeMarker(location);
          setSliderValues();
          var lat = location.lat();
          var lng = location.lng();
          makeAJAXCallsForLocation(lat, lng, false);
          setMeterZoom(lat, lng);
        } else {
          alert("Geocode was not successful for the following reason: " + status);
        }
      });
    }


}

    // get the formatted address from the json string
    function parseAddress(json) {
        obj = JSON.parse(json);
        //console.log("Parsed: ", obj);
        return obj.formatted_address;
    }

    // convert address to string with + between the words
    // for address to lat lng
    function addressToString(address) {
        var size = address.split.size();
        var addressStr = " ";
        for (i = 0; i < size - 1; i++) {
            addressStr += (address.split[i]) + "+";
        }
        addressStr += address.split[size];
        return addressStr;
    }


  function applyAllFilters() {
    if(gMeters){
      var currentMeters = gMeters.slice();
      if(myMarker) {
        var lat = myMarker.position.lat();
        var lng = myMarker.position.lng();

        if (currentMeters) {
          currentMeters = filterLocationsWithRadiusInKM(currentMeters, lat, lng);
          currentMeters = filterByRate(currentMeters, currentRate);
          currentMeters = filterByMinHours(currentMeters, currentHour);
        }
      }
      var meterIcons = createNewMarkers(currentMeters);
      placeRadiusCircle(lat, lng);
      plotMeters(meterIcons);
    }
  }

  //set slider variables to default
  function setSliderValues() {
    currentRadius = $("#radiusControl").get(0).value;
    currentRate = $("#rateControl").val();
    currentHour = $("#hourControl").val();
    //console.log("Default slider values: ", currentRadius, currentRate, currentHour);
  }

  function placeMarker(myLatLng) {
    if(myMarker == false) {
      myMarker = new google.maps.Marker({
        position: myLatLng,
        map: handler.getMap(),
      });
    }
    else{
      myMarker.setPosition(myLatLng);
    }
  }

  // Add a list of markers to the queue for reuse
  // Make it invisible so it's no longer on the map
  function enqueueMarkers(toEnqueue){
    //handler.removeMarkers(toEnqueue);
    toEnqueue.map(function(m){
      //m.setMap(null);
      m.setVisible(false);
      google.maps.event.clearInstanceListeners(m);
      markerQueue.push(m);
    });
    return [];
  }

  // Dequeue markers and draw them, or, create more if there aren't enough in
  // The queue
  function dequeueAndDrawMarkers(metersToDraw){
    //markers = handler.addMarkers(metersToDraw);

    while(metersToDraw.length > 0){
      if (markerQueue.length > 0){
        (function(){
        var toAdd = metersToDraw.pop();
        var q = markerQueue.pop();
        var iw_string = toAdd.infowindow;
        q.setPosition({lat: toAdd.lat, lng: toAdd.lng});
        //q.setMap(handler.getMap());
        q.setVisible(true);
        google.maps.event.addListener(q, 'click', function(){
          if (gInfoWindow){
            gInfoWindow.setMap(null);
          }
          gInfoWindow = new google.maps.InfoWindow({
            content: iw_string,
          });
          gInfoWindow.open(handler.getMap(), q);
        })
        markers.push(q);
        })();
      }
      else{
        var newMarkers = [];
        while (metersToDraw.length > 0){
          function addMeter(){
              var m = metersToDraw.pop();
              var newMarker = new google.maps.Marker({
                map: handler.getMap(),
                icon: '<%= image_url 'marker.png' %>',
                position: {lat: m.lat, lng: m.lng},
                clickable: true
              });
              var iw_string = m.infowindow;
              google.maps.event.addListener(newMarker, 'click', function(){
                if (gInfoWindow){
                  gInfoWindow.setMap(null);
                }
                gInfoWindow = new google.maps.InfoWindow({
                  content: iw_string,
                });
                gInfoWindow.open(handler.getMap(), newMarker);
              });
              newMarkers.push(newMarker);
          }
          addMeter();
        }
        newMarkers.map(function(m){ markers.push(m)});
      }
    }

  }

  function plotMeters(metericons) {
    if (markers && markers.length > 0) {
      markers = enqueueMarkers(markers);
    }
    dequeueAndDrawMarkers(metericons);
  }

  function createNewMarkers(meters) {
    return meters.map(function(e){
      var contentString = '<div id="content">'+
        '<p><b>ID: '+e.payByPhoneNumber+'</b></p>'+
        '<p>Meter Type: '+e.meterHeadType+'</p>'+
        '<p>Rate: $'+e.rate+'/hr</p>'+
        '<p>Time Limit: '+e.timeLimit+'hr</p>'+
        '<p>Time In Effect: '+e.timeInEffect+'</p>'+
        '</div>'
        return { lat: e.lat, lng: e.lng, infowindow: contentString}
    })
  }

  function placeRadiusCircle(circleLat, circleLng){
    if (handler){
      radius = parseInt(currentRadius);
      if (!radiusCircle){
        radiusCircle = new google.maps.Circle({
          strokeColor: '#4099FF',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#4099FF',
          fillOpacity: 0.10,
          clickable: false,
          map: handler.getMap(),
        });
      }
      radiusCircle.setCenter({lat: circleLat, lng: circleLng});
      radiusCircle.setRadius(radius);
      google.maps.event.trigger(handler.getMap(),'resize');
    }
  }

  // Convert degrees into radians
  function degreesToRadians(degrees) {
    return degrees * (Math.PI/180);
  }

  // The Haversine Formula
  // Ripped off from stack overflow:
  // http://stackoverflow.com/questions/27928/how-do-i-calculate-distance-between-two-latitude-longitude-points
  function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {
    var R = 6371; // Radius of the earth in km
    var dLat = degreesToRadians(lat2-lat1);
    var dLon = degreesToRadians(lon2-lon1);
    var a =
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) *
      Math.sin(dLon/2) * Math.sin(dLon/2)
      ;
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    var d = R * c; // Distance in km
    return d;
  }

  // Filter a list of locations to within a specific radius
  // Params:
  // latlons: a list of locations to be filtered
  // lat: the latitude of the centre-point of the radius
  // lon: the longitude of the centre-point of the radius
  // radius: the radius of the circle in kms
  // RETURNS: A filtered list of the original locations
  function filterLocationsWithRadiusInKM( latlons, lat, lon  ){
    var filtered_meters = [];
    //console.log("Filtered Meters Before: ", filtered_meters);
    for (i = 0; i < latlons.length; i++) {
      var this_lat = latlons[i].lat;
      var this_lng = latlons[i].lng;
      var distance = getDistanceFromLatLonInKm(lat, lon, this_lat, this_lng);
      distance *= 1000;
      //console.log(i, "Distance: ", distance, "Radius: ", currentRadius);
      if (distance <= currentRadius) {
        filtered_meters.push(latlons[i]);
      }
    }
    //console.log("Filtered Meters After: ", filtered_meters.length, filtered_meters);
    return filtered_meters;

  }

  // Filter a list of locations that are in a certain radius by maximum rate
  // that someone wants to pay per hour
  // meters: list of meters in the given radius
  // rate: the maximum rate chosen by the user
  function filterByRate(meters, rate) {
    //console.log("Meters: ", meters.length, meters);
    var filtered_meters = [];
    //console.log("Meters before filter: ", filtered_meters);
    for (i = 0; i < meters.length; i++) {
      if (meters[i].rate <= parseInt(rate)) {
        filtered_meters.push(meters[i]);
      }
    }
    //console.log("Meters after filter: ", filtered_meters.length, filtered_meters);
    return filtered_meters;
  }

  // Filter a list of locations by maximum hours allowed
  // meters: list of meters in the given radius
  // hours: the minimum hours you can park
  function filterByMinHours(meters, hours) {
    var filtered_meters = [];
    for (i = 0; i < meters.length; i++) {
      if (meters[i].timeLimit >= hours) {
        filtered_meters.push(meters[i]);
      }
    }
    return filtered_meters;
  }

</script>
